/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/NodeportRuleBase.h"


class K8sdispatcher;

using namespace polycube::service::model;

class NodeportRule : public NodeportRuleBase {
 public:
  NodeportRule(K8sdispatcher &parent, const NodeportRuleJsonObject &conf);
  virtual ~NodeportRule();

  /// <summary>
  /// Source IP address
  /// </summary>
  std::string getInternalSrc() override;
  void setInternalSrc(const std::string &value) override;

  /// <summary>
  /// Destination L4 port number
  /// </summary>
  uint16_t getNodeportPort() override;

  /// <summary>
  /// L4 protocol
  /// </summary>
  std::string getProto() override;

  /// <summary>
  /// Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoint
  /// </summary>
  NodeportRuleServiceTypeEnum getServiceType() override;
  void setServiceType(const NodeportRuleServiceTypeEnum &value) override;

private:
  K8sdispatcher& parent_;
  uint16_t  port_;
  std::string proto_;
  std::string internal_ip_;
  NodeportRuleServiceTypeEnum serviceType;
};
