/**
* k8sdispatcher API generated from k8sdispatcher.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* K8sdispatcherBase.h
*
*
*/

#pragma once

#include "../serializer/K8sdispatcherJsonObject.h"

#include "../NattingRule.h"
#include "../NodeportRule.h"
#include "../Ports.h"

#include "polycube/services/cube.h"
#include "polycube/services/port.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class K8sdispatcherBase: public virtual polycube::service::Cube<Ports> {
 public:
  K8sdispatcherBase(const std::string name);
  
  virtual ~K8sdispatcherBase();
  virtual void update(const K8sdispatcherJsonObject &conf);
  virtual K8sdispatcherJsonObject toJsonObject();

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  virtual std::shared_ptr<Ports> getPorts(const std::string &name);
  virtual std::vector<std::shared_ptr<Ports>> getPortsList();
  virtual void addPorts(const std::string &name, const PortsJsonObject &conf);
  virtual void addPortsList(const std::vector<PortsJsonObject> &conf);
  virtual void replacePorts(const std::string &name, const PortsJsonObject &conf);
  virtual void delPorts(const std::string &name);
  virtual void delPortsList();

  /// <summary>
  /// Range of VIPs where clusterIP services are exposed
  /// </summary>
  virtual std::string getClusterIpSubnet() = 0;
  virtual void setClusterIpSubnet(const std::string &value) = 0;

  /// <summary>
  /// Range of IPs of pods in this node
  /// </summary>
  virtual std::string getClientSubnet() = 0;
  virtual void setClientSubnet(const std::string &value) = 0;

  /// <summary>
  /// Internal src ip used for services with externaltrafficpolicy&#x3D;cluster
  /// </summary>
  virtual std::string getInternalSrcIp() = 0;
  virtual void setInternalSrcIp(const std::string &value) = 0;

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<NattingRule> getNattingRule(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto) = 0;
  virtual std::vector<std::shared_ptr<NattingRule>> getNattingRuleList() = 0;
  virtual void addNattingRule(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingRuleJsonObject &conf) = 0;
  virtual void addNattingRuleList(const std::vector<NattingRuleJsonObject> &conf);
  virtual void replaceNattingRule(const std::string &internalSrc, const std::string &internalDst, const uint16_t &internalSport, const uint16_t &internalDport, const std::string &proto, const NattingRuleJsonObject &conf);
  virtual void delNattingRule(const std::string &internalSrc,const std::string &internalDst,const uint16_t &internalSport,const uint16_t &internalDport,const std::string &proto) = 0;
  virtual void delNattingRuleList();

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<NodeportRule> getNodeportRule(const uint16_t &nodeportPort, const std::string &proto) = 0;
  virtual std::vector<std::shared_ptr<NodeportRule>> getNodeportRuleList() = 0;
  virtual void addNodeportRule(const uint16_t &nodeportPort, const std::string &proto, const NodeportRuleJsonObject &conf) = 0;
  virtual void addNodeportRuleList(const std::vector<NodeportRuleJsonObject> &conf);
  virtual void replaceNodeportRule(const uint16_t &nodeportPort, const std::string &proto, const NodeportRuleJsonObject &conf);
  virtual void delNodeportRule(const uint16_t &nodeportPort,const std::string &proto) = 0;
  virtual void delNodeportRuleList();

  /// <summary>
  /// Port range used for NodePort services
  /// </summary>
  virtual std::string getNodeportRange() = 0;
  virtual void setNodeportRange(const std::string &value) = 0;
};
